================================================
Gorap 2  -  Genomewide ncRNA Annotation Pipeline
================================================

Gorap screens genomic sequences for all non-coding RNAs present in the Rfam database using 
- a generalized strategy and applying multiple filters 
- or specialized software. 
Gorap provides ncRNA based reconstruction of phylogenetic trees and is able to perform de novo predictions including TPM calculations from RNA-Seq experiments. RNA family specific screening options, threshold and constrains can be easily amended and completed by custom queries.

Goraps setup will install Bio::Gorap, which is a distribution of Perl modules to provide software wrappers and functions for efficient Fasta, GFF, Stockholm alignment file and taxonomic manipulation.

The installation process includes all necessary software and databases to run the Gorap pipeline.
- Infernal, Blast, RNAmmer, tRNAscan, Bcheck, CRT, RAxML, Mafft, Samtools
- Rfam, NCBI Taxonomy, Silva

Requirements: Linux/Unix or Mac with internet access and installed
- Perl, git, gcc, make, wget, curl

1   INSTALLATION
2   UPDATE GORAP
3   RUN GORAP
4   RESULTS
5   CONFIGURE GORAP
6   MISSING STUFF
7   CONTACT


--------------
1 INSTALLATION
--------------

1) Set the GORAP variable, assigned to its installation directory
export GORAP=/path/to/install/dir
2) store the GORAP variable permanently to ensure that Gorap can always find the required tools
echo "export GORAP=$GORAP" >> ~/.bashrc
3) Download Gorap
git clone --recursive https://github.com/koriege/gorap.git
4) Enter the source directory
cd gorap
5) Install necessary third-party tools
./setup.sh -d $GORAP
6) Install Gorap
source $GORAP/conda/bin/activate gorap
cpanm .
make clean
rm Makefile.old
conda deactivate
7) Download latest NCBI Taxonomy
source $GORAP/conda/bin/activate gorap
Gorap.pl -update ncbi
conda deactivate


--------------
2 UPDATE GORAP
--------------

1) Follow the INSTALLATION steps 1 to 4
3) Install Gorap
source $GORAP/conda/bin/activate gorap
cpanm .
make clean
rm Makefile.old
conda deactivate
4) Optionally, choose a) and or b)
a) Replace databases and configurations from enclosed data archive
./setup.sh -u -d $GORAP
b) Download latest databases and subsequently re-configure Gorap
source $GORAP/conda/bin/activate gorap
Gorap.pl -update all
conda deactivate


-----------
3 RUN GORAP
-----------

- Load conda environment
source $GORAP/conda/bin/activate gorap

- Get help
Gorap.pl -h

- Screen example data for 6S RNA (Rfam entry 13), on 8 threads and taxonomic information 
Gorap.pl -q 13 -c 8 -k bac -s 562 -r 543 -i $GORAP/db/example/ecoli.fa

- Run GORAP using a parameter file - adapt existing parameter file for your needs
Gorap.pl -file parameter.txt

- Hint 1: Multiple runs can be saved into the same output directory
- Hint 2: Restart a run with same parameters, adding -skip option will skip annotation to perform downstream analysis like phylogeny reconstruction
- Hint 3: Command line parameters priorize parameter file settings
-> e.g. Gorap.pl -file parameter.txt -skip -sort -l newlabel

- Example for annotation and SSU/RNome based phylogeny reconstruction (via -og) in one step
- A given outgroup genome will be screened only for ncRNAs predicted in genome files given by -i
Gorap.pl -i <FASTA>,<FASTA>,<FASTA>,<FASTA> -k bac -og <FASTA>

- 3-Step phylogeny reconstruction on hand curated alignments
- Hint: Using labels is highly recommended to update initially created HTML output
Gorap.pl -i <FASTA>,<FASTA>,<FASTA>,<FASTA> -k bac -l mylabel
- Evaluate alignments and remove false positve sequences from STK files
- Sequneces may also be re-added from intermediate (meta) results
Gorap.pl -i <FASTA>,<FASTA>,<FASTA>,<FASTA> -k bac -l mylabel -refresh
- Skip the annotation process, but run downstream phylogeny reconstruction on a chosen outgroup
Gorap.pl -i <FASTA>,<FASTA>,<FASTA> -og <FASTA> -k bac -l mylabel -skip

- Deactivate conda environment
conda deactivate


---------
4 RESULTS
---------

Browse the results by either using a webbrowser (index.html) or check out the following directories

1) annotations
*orig - files with original sequence ids
*passed - files with predictions that passed all filters

GFF filter tags (ordered according to sequentially applied Gorap filters):
L - Length cutoff if predicted gene is shorter than 40% of consensus reference
B - Bitscore cutoff as minimum of scores by taxonomic related species or Rfam suggested noise cutoff
S - Structure based rejection if predicted gene holds less than 50% conserved hairpins
P - Primary sequence conservation based rejection, if predicted gene has less than 70% of strongly (>=90%) conserved nucleotides in Rfam
	Exception: snoRNAs, which are screened for special properties and proper box motifs
C - Copy number cutoff as defined in configuration file
O - Overlap based rejection if higher scored annotation exists due to multi- tool or kingdom screening
X - Tag for manually deleted sequences after Gorap refresh
! - Passed tag - all filters passed

2) alignments - in Stockholm format 
sequences comprise Rfam seed sequences and new predictions which passed all filters

3) phylogeny in newick and PDF format
RNome - all ncRNA predictions (except rRNAs and tRNAs), using a super-matrix approach
core50RNome - ncRNA predictions (except rRNAs and tRNAs), present in >=50% of given input FASTA files, using a super-matrix approach
coreRNomeSTK - ncRNAs present in all species, built from concatenated Stockholm alignments
coreRNomeMAFFT - ncRNAs present in all species, built by Mafft from concatenated FASTA sequences

4) meta - Stockholm alignments returned by sequentially applied Gorap filters


-----------------
5 CONFIGURE GORAP
-----------------

Configuration files are located in the $GORAP/db/config directory and enable to define RNA family specific
- thresholds
- command lines of prediction tools
- consensus sequence based mismatch constrains

5.1 CUSTOM CONSTRAINS

Gorap comes with pre-defined constrains for many C/D-Box snoRNAs comprising
- the C-box motif UGAUGA
- the D-box motif CUGA
Example:
conserved=uuGCAAUGAUGuUAagAAUUUCUUcacCUGAAuuaaaCcuUGAaGuucAAAaauCGAGCUUUUUAACaCUGAGCaaa
constrain=.....|..1...|......................................................|.1..|....
constrain=......|0.|...........................................................|0.|....

Use constrains to set the number of allowed mismatches in a specific region.
The given STK consensus can be modified according to IUPAC, but must not change in length.

5.2 ADD CUSTOM TOOLS

Requirement: The output format of yet unsupported tools must be GFF3

In the [cmd] section, cli parameters are stored for each tool applied.
Available placeholders:
- $genome (replaced by a fasta file location)
- $kingdom (replaced by bac, arc, euk, fungi or virus)
- $cpus (replaced by number of threads to use)
- $output (replaced by a temporary file location. default: STDOUT will be parsed)

Example:
tool=barrnap
parameter=--threads $cpus --kingdom $kingdom $genome


5.3 ADD CUSTOM FAMILY

Create a new configuration file in the $GORAP/db/config directory following the naming scheme RFxxxxx_description.cfg
To use the default screening methods Infernal and/or Blast add the following cli commands to the [cmd] section

Example:
tool=Infernal
tool=Blast

According to the chosen naming scheme, put a Stockholm alignment file and its covariance model in a new directory under $GORAP/db/rfam


---------------
6 MISSING STUFF
---------------

Suggestions? Bugs? Troubles? Please let me know!


---------
7 CONTACT
---------

konstantin.riege{a}leibniz-fli{.}de
