#! /usr/bin/env bash
# (c) Konstantin Riege
shopt -s extglob
trap 'trap "" EXIT; kill -PIPE -- -$$' INT KILL TERM EXIT

trapper() {
	echo ":ERROR: failed" | tee -a $log 2> /dev/null
	sleep 1
	exit 1
}

progressbar() {
	mod=0
	while true; do
		((++mod))
		if [[ $mod -eq 2 ]]; then
			mod=0
			echo -en "\r/"
		else
			echo -en "\r\\"
		fi
		sleep 1
	done

	return 0
}

progresslog() {
	tail -f $1 2>&1 | grep -E --line-buffered '^\s*(:INFO:|:ERROR:|:WARNING:)'

	return 0
}

usage() {
cat << EOF
DESCRIPTION
$(basename $0) the genome wide anntation pipeline Gorap
into exported directory: export GORAP=/path/to/install/dir

VERSION
$VERSION

SYNOPSIS
$(basename $0) -i [all|anno]

INSTALLATION OPTIONS
-i | --install [all|update] : install all tools or upgrade Gorap
-l | --log [path]           : log file - default: GORAP/install.log
-t | --threads [value]      : threads - predicted value: $threads
-v | --verbose              : enable verbose mode
-h | --help                 : prints this message

REFERENCES
(c) Konstantin Riege
konstantin.riege{a}uni-jena{.}de
EOF
	exit 0
}

checkopt() {
	case $1 in
	-h | --h | -help | --help) usage; return 0;;
	-v | --v | -verbose | --verbose) verbose=1; return 0;;
	-t | --t | -threads | --threads) threads=$2;;
	-i | --i | -install | --install) make=$2;;
	-l | --l | -log | --log) log=$2;;
	-*) echo ":ERROR: illegal option $1"; return 1;;
	*) echo ":ERROR: illegal option $2"; return 1;;
	esac
	[[ ! $2 ]] && echo ":ERROR: argument missing for option $1" && return 1
	[[ $2 =~ ^- ]] && echo ":ERROR: illegal argument $2 for option $1" && return 1

	return 0
}

dependencies() {
	[[ $(make -h &> /dev/null; echo $?) -gt 0 ]] && echo ":ERROR: dependency missing: make" && return 1
	[[ $(gcc -v &> /dev/null; echo $?) -gt 0 ]] && echo ":ERROR: dependency missing: gcc" && return 1
	[[ $(unzip -h &> /dev/null; echo $?) -gt 0 ]] && echo ":ERROR: dependency missing: unzip" && return 1
	[[ $(gzip -h &> /dev/null; echo $?) -gt 0 ]] && echo ":ERROR: dependency missing: gzip" && return 1
	[[ $(bzip2 -h &> /dev/null; echo $?) -gt 0 ]] && echo ":ERROR: dependency missing: bzip2" && return 1

	return 0
}

check() {
	export PERL5LIB=$(ls -d $GORAP/gorap/*/perl5/ 2> /dev/null | xargs -echo | sed 's/ /:/g'):$PERL5LIB
	export PATH=$(readlink -f $GORAP/bin/* | xargs -echo | sed 's/ /:/g'):$PATH
	[[ $(java -h &> /dev/null; echo $?) -gt 0 ]] && echo ":ERROR: check failed - try: setup -i java" && return 1
	[[ $(samtools 2>&1 | grep -Fc Version) -eq 0 ]] && echo ":ERROR: check failed - try: setup -i samtools" && return 1
	[[ $(raxml -h &> /dev/null; echo $?) -gt 0 ]] && echo ":ERROR: check failed - try: setup -i raxml" && return 1
	[[ $(mafft -h 2>&1 | grep -Fc MAFFT) -eq 0 ]] && echo ":ERROR: check failed - try: setup -i mafft" && return 1
	[[ $(newicktopdf -h &> /dev/null; echo $?) -gt 0 ]] && echo ":ERROR: check failed - try: setup -i newicktopdf" && return 1
	[[ $(crt 2>&1 | grep -Fc OPTIONS) -eq 0 ]] && echo ":ERROR: check failed - try: setup -i crt" && return 1
	[[ $(tRNAscan-SE -h &> /dev/null; echo $?) -gt 0 ]] && echo ":ERROR: check failed - try: setup -i trnascan" && return 1
	[[ $(hmmsearch -h &> /dev/null; echo $?) -gt 0 ]] && echo ":ERROR: check failed - try: setup -i hmmer" && return 1
	[[ $(rnabob -h &> /dev/null; echo $?) -gt 0 ]] && echo ":ERROR: check failed - try: setup -i rnabob" && return 1
	[[ $(Bcheck -h &> /dev/null; echo $?) -gt 0 ]] && echo ":ERROR: check failed - try: setup -i bcheck" && return 1
	[[ $(cmsearch -h &> /dev/null; echo $?) -gt 0 ]] && echo ":ERROR: check failed - try: setup -i infernal" && return 1
	[[ $(barrnap 2>&1 | grep -Fc Torsten) -eq 0 ]] && echo ":ERROR: check failed - try: setup -i barrnap" && return 1
	[[ $(blastn -h; echo $?) -gt 0 ]] && echo ":ERROR: check failed - try: setup -i blast" && return 1

	return 0
}

############### TOOLS

makeclean() {
	rm -rf built
	[[ $1 ]] && make clean -f $1 &> /dev/null || make clean &> /dev/null

	return 0
}

compile_all() { #clibs -> samtools -> gorap -> trnascan, infernal1 -> rnabob -> bcheck
	{	compile_cpanm && \
		compile_java && \
		compile_clibs && \
		compile_samtools && \
		compile_gorap && \
		compile_infernal && \
		compile_infernal1 && \
		compile_blast && \
		compile_hmmer && \
		compile_rnabob && \
		compile_barrnap && \
		compile_trnascan && \
		compile_bcheck && \
		compile_crt && \
		compile_mafft && \
		compile_raxml && \
		compile_newicktopdf
	} || return 1

	return 0
}

compile_cpanm() {
	echo ":INFO: installing cpanm"
	(	mkdir -p $GORAP/cpanm && \
		url='cpanmin.us' && \
		wget -q $url -O $GORAP/cpanm/cpanm
	) 2> /dev/null
	{	chmod 775 $GORAP/cpanm/cpanm
	} || return 1

	return 0
}

compile_samtools() {
	echo ":INFO: installing samtools"
	declare ncurses=$(ls -dv $GORAP/ncurses*/built/lib*/ | tail -1)
	declare zlib=$(ls -dv $GORAP/zlib*/built/lib*/ | tail -1)
	(	url='https://github.com/samtools/samtools/archive/0.1.19.tar.gz' && \
		wget -q $url -O $GORAP/samtools.tar.gz && \
		tar -xzf $GORAP/samtools.tar.gz -C $GORAP && \
		rm $GORAP/samtools.tar.gz
	) 2> /dev/null
	{	cd $(ls -dv $GORAP/samtools*/ | tail -1) && \
		makeclean && \
		sed -i'' -r 's/^\s*CFLAGS\s*=\s*/override CFLAGS += /' Makefile && \
		sed -i 's/-lcurses/-lncurses/' Makefile && \
		make -j $threads CFLAGS="-fPIC -I$ncurses/../include -I$ncurses/../include/ncurses -I$zlib/../include" LDFLAGS="-L$ncurses -L$zlib" && \
		ln -sfn $PWD $GORAP/bin/samtools
	} || return 1

	return 0
}

compile_gorap() {
	echo ":INFO: installing gorap"
	unset PERL5LIB
	export SAMTOOLS=$(ls -dv $GORAP/samtools*/ | tail -1)
	(	cd $SRC && \
		mkdir -p $GORAP/gorap/src && \
		$GORAP/cpanm/cpanm -l /dev/null --force --scandeps --save-dists $GORAP/gorap/src .
	) &> /dev/null
	{	cd $SRC && \
		$GORAP/cpanm/cpanm -l $GORAP/gorap --force --reinstall --mirror file://$GORAP/gorap/src . && \
		makeclean && \
		rm Makefile.old && \
		ln -sfn $GORAP/gorap/bin $GORAP/bin/gorap && \
		tar -xzf data-13.tar.gz -C $GORAP/gorap
	} || return 1
	for i in $(find $GORAP/gorap -type f -name 'SimpleAlign.pm'); do
		chmod 644 $i
		sed -i '/contains no residues/d' $i
		sed -i '/Sequence excluded/d' $i
		sed -i '/Replacing one sequence/d' $i
	done

	return 0
}

compile_update() {
	echo ":INFO: upgrading gorap"
	unset PERL5LIB
	export SAMTOOLS=$(ls -dv $GORAP/samtools*/ | tail -1)
	(	cd $SRC && \
		mkdir -p $GORAP/gorap/src && \
		$GORAP/cpanm/cpanm -l /dev/null --force --scandeps --save-dists $GORAP/gorap/src .
	) &> /dev/null
	{	cd $SRC && \
		$GORAP/cpanm/cpanm -l $GORAP/gorap --force . && \
		makeclean && \
		rm Makefile.old && \
		ln -sfn $GORAP/gorap/bin $GORAP/bin/gorap
	} || return 1
	for i in $(find $GORAP/gorap -type f -name 'SimpleAlign.pm'); do
		chmod 644 $i
		sed -i '/contains no residues/d' $i
		sed -i '/Sequence excluded/d' $i
		sed -i '/Replacing one sequence/d' $i
	done

	return 0
}

compile_upgrade() {
	compile_update
}

compile_java() {
	(	echo ":INFO: installing java" && \
		url=$(curl -s http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html | grep -Eo 'http[^"]+linux-x64.tar.gz') && \
		wget --no-cookies --no-check-certificate --header "Cookie: oraclelicense=accept-securebackup-cookie" $url -O $GORAP/java.tar.gz && \
		tar -xzf $GORAP/java.tar.gz -C $GORAP && \
		rm $GORAP/java.tar.gz
	) 2> /dev/null
	{	cd $(ls -vd $GORAP/jdk*/bin/ | tail -1) && \
		ln -sfn $(ls -vd $GORAP/jdk*/bin/ | tail -1) $GORAP/bin/java
	} || return 1

	return 0
}

compile_clibs() {
	echo ":INFO: installing c(++) libraries"
	(	url='https://ftp.gnu.org/pub/gnu/ncurses/ncurses-6.0.tar.gz' && \
		wget -q $url -O $GORAP/ncurses.tar.gz && \
		tar -xzf $GORAP/ncurses.tar.gz -C $GORAP && \
		rm $GORAP/ncurses.tar.gz
	) 2> /dev/null
	{	cd $(ls -dv $GORAP/ncurses*/ | tail -1) && \
		makeclean && \
		mkdir built && \
		./configure --prefix=$PWD/built && \
		make -j $THREADS && \
		make install
	} || return 1

	(	url='https://github.com/madler/zlib/archive/v1.2.8.tar.gz' && \
		# version >= 1.2.10 is not recognized as bigger than 1.2.1 by R
		wget -q $url -O $GORAP/zlib.tar.gz && \
		tar -xzf $GORAP/zlib.tar.gz -C $GORAP && \
		rm $GORAP/zlib.tar.gz
	) 2> /dev/null
	{	cd $(ls -dv $GORAP/zlib*/ | tail -1) && \
		makeclean && \
		mkdir built && \
		./configure --prefix=$PWD/built && \
		make -j $THREADS && \
		make install
	} || return 1

	(	url='http://www.bzip.org/1.0.6/bzip2-1.0.6.tar.gz' && \
		wget -q $url -O $GORAP/libbz2.tar.gz && \
		tar -xzf $GORAP/libbz2.tar.gz -C $GORAP && \
		rm $GORAP/libbz2.tar.gz
	) 2> /dev/null
	{	cd $(ls -dv $GORAP/bzip2*/ | tail -1) && \
		makeclean && \
		sed -i -r 's/^\s*CFLAGS\s*=\s*/override CFLAGS += /' Makefile && \
		make -j $THREADS CFLAGS="-fPIC"
	} || return 1

	return 0
}

compile_raxml() {
	echo ":INFO: installing raxml"
	(	url='https://github.com/stamatak/standard-RAxML/archive/v8.2.11.tar.gz' && \
		wget -q $url -O $GORAP/raxml.tar.gz && \
		tar -xzf $GORAP/raxml.tar.gz -C $GORAP && \
		rm $GORAP/raxml.tar.gz
	) 2> /dev/null
	if [[ $OSTYPE =~ darwin ]]; then
		makefile='Makefile.AVX2.PTHREADS.mac'
		avx=$(sysctl -n machdep.cpu.features | grep -Fi avx2)
		[[ ! $avx ]] && makefile='Makefile.AVX.PTHREADS.mac' && avx=$(sysctl -n machdep.cpu.features | grep -Fi avx)
		[[ ! $avx ]] && makefile='Makefile.SSE3.PTHREADS.mac'
	else
		makefile='Makefile.AVX2.PTHREADS.gcc'
		avx=$(grep -Fi avx2 /proc/cpuinfo)
		[[ ! $avx ]] && makefile='Makefile.AVX.PTHREADS.gcc' && avx=$(grep -Fi avx /proc/cpuinfo)
		[[ ! $avx ]] && makefile='Makefile.SSE3.PTHREADS.gcc'
	fi
	{	cd $(ls -vd $GORAP/standard-RAxML*/ | tail -1) && \
		makeclean $makefile && \
		make -j $threads -f $makefile && \
		mkdir -p bin && \
		mv raxml* bin/raxml && \
		ln -sfn $PWD/bin $GORAP/bin/raxml
	} || return 1

	return 0
}

compile_mafft() {
	echo ":INFO: installing mafft"
	(	url='https://mafft.cbrc.jp/alignment/software/mafft-7.312-with-extensions-src.tgz' && \
		wget -q $url -O $GORAP/mafft.tar.gz && \
		tar -xzf $GORAP/mafft.tar.gz -C $GORAP && \
		rm $GORAP/mafft.tar.gz
	) &> /dev/null
	{	cd $(ls -vd $GORAP/mafft*/ | tail -1) && \
		bindir=$PWD/binaries
		cd core
		sed -i -r "s@PREFIX\s*=.*@PREFIX=$bindir@" Makefile
		makeclean && \
		make -j $threads && \
		make install
		cd ../extensions && \
		sed -i -r "s@PREFIX\s*=.*@PREFIX=$bindir@" Makefile
		make -j $threads && \
		make install
		ln -sfn $bindir/bin $GORAP/bin/mafft
	} || return 1

	return 0
}

compile_newicktopdf() {
	echo ":INFO: installing newicktopdf"
	(	mkdir -p $GORAP/newicktopdf && \
		url='ftp://pbil.univ-lyon1.fr/pub/mol_phylogeny/njplot/newicktopdf' && \
		wget -q $url -O $GORAP/newicktopdf/newicktopdf
	) &> /dev/null
	{	chmod 755 $GORAP/newicktopdf/newicktopdf && \
		ln -sfn $GORAP/newicktopdf $GORAP/bin/newicktopdf
	} || return 1

	return 0
}

compile_infernal() {
	echo ":INFO: installing infernal"
	(	url='http://eddylab.org/infernal/infernal-1.1.2.tar.gz' && \
		wget -q $url -O $GORAP/infernal.tar.gz && \
		tar -xzf $GORAP/infernal.tar.gz -C $GORAP && \
		rm $GORAP/infernal.tar.gz
	) &> /dev/null
	{	cd $(ls -vd $GORAP/infernal*/ | tail -1) && \
		./configure --prefix=$PWD && \
		makeclean && \
		make -j $threads && \
		make install && \
		cd easel && \
		make -j $threads && \
		make install && \
		cd .. && \
		ln -sfn $PWD/bin $GORAP/bin/infernal
	} || return 1

	return 0
}

compile_infernal1() {
	echo ":INFO: installing infernal 1.0"
	(	url='http://eddylab.org/software/infernal/infernal-1.0.tar.gz' && \
		wget -q $url -O $GORAP/infernal1.tar.gz && \
		tar -xzf $GORAP/infernal1.tar.gz -C $GORAP && \
		rm $GORAP/infernal1.tar.gz
	) &> /dev/null
	{	cd $(ls -vd $GORAP/infernal*/ | head -1) && \
		./configure --prefix=$PWD && \
		makeclean && \
		make -j $threads && \
		make install && \
		ln -sfn $PWD/bin $GORAP/bin/infernal1
	} || return 1

	return 0
}

compile_crt() {
	echo ":INFO: installing crt"
	(	mkdir -p $GORAP/crt-1.2
		url='http://www.room220.com/crt/CRT1.2-CLI.jar.zip' && \
		wget -q $url -O $GORAP/crt.zip && \
		unzip -q -o -d $GORAP/crt-1.2 $GORAP/crt.zip && \
		rm $GORAP/crt.zip
	) &> /dev/null
	{	cd $(ls -vd $GORAP/crt*/ | tail -1) && \
		touch crt && \
		chmod 755 crt && \
		ln -sfn $PWD $GORAP/bin/crt
	} || return 1
cat << EOF > crt
#!/usr/bin/env bash
if [[ \$OSTYPE =~ darwin ]]; then
	memory=\$(sysctl -n hw.memsize | awk '{printf("%d",\$1*0.9/1024))}')
	cpus=$(sysctl -n hw.ncpu)
else
	memory=\$(grep -i memtotal /proc/meminfo | awk '{printf("%d",\$2*0.9/1024)}')
	cpus=\$(cat /proc/cpuinfo | grep -cF processor)
fi
if [[ \$1 =~ ^instances= ]]; then
	i=\$(echo \$1 | sed 's/instances=//')
	shift
	gct=\$((cpus/i))
	memory=\$(echo \$memory | awk -v i=\$i '{printf("%d",\$1/i)}')
	java -Xmx\${memory}m -XX:ParallelGCThreads=\$gct -Djava.io.tmpdir=\$GORAP/tmp -cp $(ls -v $PWD/trimmomatic*.jar | tail -1) crt \$*
else
	java -Xmx\${memory}m -Djava.io.tmpdir=\$GORAP/tmp -cp $(ls -v $PWD/CRT*.jar | tail -1) crt \$*
fi
EOF

	return 0
}

compile_rnabob() {
	echo ":INFO: installing rnabob"
	(	url='http://eddylab.org/software/rnabob/rnabob-2.2.1.tar.gz' && \
		wget -q $url -O $GORAP/rnabob.tar.gz && \
		tar -xzf $GORAP/rnabob.tar.gz -C $GORAP && \
		rm $GORAP/rnabob.tar.gz
	) &> /dev/null
	{	cd $(ls -vd $GORAP/rnabob*/ | tail -1) && \
		mkdir -p bin && \
		mkdir -p man/man1 && \
		sed -i -r "s@BINDIR\s*=.*@BINDIR=$PWD/bin@" Makefile && \
		sed -i -r "s@MANDIR\s*=.*@MANDIR=$PWD/man@" Makefile && \
		makeclean && \
		make -j $threads && \
		make install && \
		ln -sfn $PWD/bin $GORAP/bin/rnabob
	} || return 1

	return 0
}

compile_trnascan() {
	echo ":INFO: installing trnascan"
	(	url='http://eddylab.org/software/tRNAscan-SE/tRNAscan-SE-1.3.1.tar.gz' && \
		wget -q $url -O $GORAP/trnascan.tar.gz && \
		tar -xzf $GORAP/trnascan.tar.gz -C $GORAP && \
		rm $GORAP/trnascan.tar.gz
	) &> /dev/null
	{	cd $(ls -vd $GORAP/tRNAscan-SE*/ | tail -1) && \
		mkdir -p bin && \
		mkdir -p man/man1 && \
		mkdir -p lib/tRNAscan-SE && \
		sed -i -r "s@BINDIR\s*=.*@BINDIR=$PWD/bin@" Makefile && \
		sed -i -r "s@MANDIR\s*=.*@MANDIR=$PWD/man@" Makefile && \
		sed -i -r "s@LIBDIR\s*=.*@LIBDIR=$PWD/lib/tRNAscan-SE@" Makefile && \
		sed -i -r "s@TEMPDIR\s*=.*@TEMPDIR=$GORAP/tmp@" Makefile && \
		makeclean && \
		make -j $threads && \
		make install && \
		sed -i -r 's/#\s*!\s*\/.*/#! \/usr\/bin\/env perl/' bin/tRNAscan-SE && \
		cp -r bin/tRNAscanSE $(ls -vd $GORAP/gorap/*/perl5/ | tail -1) && \
		ln -sfn $PWD/bin $GORAP/bin/trnascan
	} || return 1

	return 0
}

compile_hmmer() {
	echo ":INFO: installing hmmer"
	(	url='http://eddylab.org/software/hmmer/2.3.2/hmmer-2.3.2.tar.gz' && \
		wget -q $url -O $GORAP/hmmer.tar.gz && \
		tar -xzf $GORAP/hmmer.tar.gz -C $GORAP && \
		rm $GORAP/hmmer.tar.gz
	) &> /dev/null
	{	cd $(ls -vd $GORAP/hmmer*/ | tail -1) && \
		./configure --enable-threads --enable-lfs --prefix=$PWD && \
		make clean && \
		make -j $threads && \
		make install && \
		ln -sfn $PWD/bin $GORAP/bin/hmmer
	} || return 1

	return 0
}

compile_barrnap() {
	echo ":INFO: installing barrnap"
	(	url='https://github.com/tseemann/barrnap/archive/0.8.tar.gz' && \
		wget -q $url -O $GORAP/barrnap.tar.gz && \
		tar -xzf $GORAP/barrnap.tar.gz -C $GORAP && \
		rm $GORAP/barrnap.tar.gz
	) &> /dev/null
	{	cd $(ls -vd $GORAP/barrnap*/ | tail -1) && \
		ln -sfn $PWD/bin $GORAP/bin/barrnap
	} || return 1
	return 0
}

compile_bcheck() {
	echo ":INFO: installing bcheck"
	(	url='http://rna.tbi.univie.ac.at/bcheck/Bcheck.tgz'
		wget -q $url -O $GORAP/bcheck.tar.gz && \
		tar -xzf $GORAP/bcheck.tar.gz -C $GORAP && \
		rm $GORAP/bcheck.tar.gz
	) &> /dev/null
	{	cd $(ls -vd $GORAP/Bcheck*/ | tail -1) && \
		rnabob=$(ls -vd $GORAP/rnabob*/bin/rnabob | tail -1) && \
		bobversion=$($rnabob -h | grep -F version | awk '{print $2}') && \
		sed -i "s/if bob_version != '2.1'/if bob_version != '$bobversion'/" Bcheck && \
		ln -sfn $PWD $GORAP/bin/bcheck
	} || return 1

	return 0
}

compile_blast() {
	echo ":INFO: installing blast"
	if [[ $OSTYPE =~ darwin ]]; then
		url=$(wget --spider --force-html -r -nd -np -l 1 -A *x64-macosx.tar.gz ftp://ftp.ncbi.nlm.nih.gov/blast/executables/blast+/LATEST/ 2>&1 | grep '^--.*tar.gz' | awk '{print $NF}')
	else
		url=$(wget --spider --force-html -r -nd -np -l 1 -A *x64-linux.tar.gz ftp://ftp.ncbi.nlm.nih.gov/blast/executables/blast+/LATEST/ 2>&1 | grep '^--.*tar.gz' | awk '{print $NF}')
	fi
	(	wget -q $url -O $GORAP/blast.tar.gz && \
		tar -xzf $GORAP/blast.tar.gz -C $GORAP && \
		rm $GORAP/blast.tar.gz
	) &> /dev/null
	{	cd $(ls -vd $GORAP/ncbi-blast*/ | tail -1) && \
		ln -sfn $PWD/bin $GORAP/bin/blast
	} || return 1

	return 0
}

compile_jquery() {
	echo ":INFO: installing jquery"
	url='http://tablesorter.com/__jquery.tablesorter.zip'
	(	wget -q $url -O $GORAP/jquery.zip && \
		mkdir -p $GORAP/jquery
		unzip -q -o -d $GORAP/jquery $GORAP/jquery.zip && \
		rm $GORAP/jquery.zip
	) &> /dev/null

	return 0
}

############### MAIN

[[ $# -eq 0 ]] && usage
[[ ! $GORAP ]] && echo ":ERROR: please do: export GORAP=/path/to/install/dir" && trapper
dependencies || trapper

make='all'
if [[ $OSTYPE =~ darwin ]]; then
	threads=$(sysctl -n hw.ncpu)
else
	threads=$(cat /proc/cpuinfo | grep -cF processor)
fi
verbose=0
log=$GORAP/install.log
SRC=$(cd $(dirname $0) && echo $PWD)
cd $SRC
VERSION=$(perl -e 'use File::Spec::Functions; BEGIN{ unshift @INC,"$ENV{PWD}/lib"}; use Bio::Gorap::Gorap; print Bio::Gorap::Gorap->VERSION')
for i in $(seq 1 $#); do
	if [[ ${!i} =~ ^- ]]; then
		j=$((i+1))
		checkopt ${!i} ${!j} || trapper
	else
		((++i))
	fi
done

mkdir -p $(dirname $log)
mkdir -p $GORAP/bin
echo '' > $log || trapper

install=()
IFS=','
for i in $make; do
	install+=($i)
done
unset IFS

mkdir -p $GORAP/tmp
echo ":INFO: installation started. please be patient. check logs via: tail -f $log"
if [[ $verbose -gt 0 ]]; then
	for i in ${install[@]}; do
		compile_$i 2>&1 | tee $log
		[[ ${PIPESTATUS[0]} -gt 0 ]] && trapper
	done
else
	progressbar &
	progresslog $log &
	for i in ${install[@]}; do
		compile_$i &>> $log
		[[ $? -gt 0 ]] && trapper
	done
fi

echo ":INFO: success" | tee -a $log
sleep 1
exit 0
